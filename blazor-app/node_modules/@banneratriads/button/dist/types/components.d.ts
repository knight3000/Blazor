/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface AtriaButton {
        "active": boolean;
        "buttonIconLeft": string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "button-icon-left"?: string;
        "buttonIconRight": string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "button-icon-right"?: string;
        "buttonId": string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "button-id"?: string;
        "buttonRole": string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "button-role"?: string;
        "buttonText": string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "button-text"?: string;
        "buttonType": string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "button-type"?: string;
        "disabled": boolean;
        "loading": boolean;
        "width": string;
    }
}
export interface AtriaButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtriaButtonElement;
}
declare global {
    interface HTMLAtriaButtonElementEventMap {
        "btnClick": any;
    }
    interface HTMLAtriaButtonElement extends Components.AtriaButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtriaButtonElementEventMap>(type: K, listener: (this: HTMLAtriaButtonElement, ev: AtriaButtonCustomEvent<HTMLAtriaButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtriaButtonElementEventMap>(type: K, listener: (this: HTMLAtriaButtonElement, ev: AtriaButtonCustomEvent<HTMLAtriaButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtriaButtonElement: {
        prototype: HTMLAtriaButtonElement;
        new (): HTMLAtriaButtonElement;
    };
    interface HTMLElementTagNameMap {
        "atria-button": HTMLAtriaButtonElement;
    }
}
declare namespace LocalJSX {
    interface AtriaButton {
        "active"?: boolean;
        "buttonIconLeft"?: string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "button-icon-left"?: string;
        "buttonIconRight"?: string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "button-icon-right"?: string;
        "buttonId"?: string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "button-id"?: string;
        "buttonRole"?: string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "button-role"?: string;
        "buttonText"?: string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "button-text"?: string;
        "buttonType"?: string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "button-type"?: string;
        "disabled"?: boolean;
        "loading"?: boolean;
        "onBtnClick"?: (event: AtriaButtonCustomEvent<any>) => void;
        "width"?: string;
    }
    interface IntrinsicElements {
        "atria-button": AtriaButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "atria-button": LocalJSX.AtriaButton & JSXBase.HTMLAttributes<HTMLAtriaButtonElement>;
        }
    }
}
